# Common makefile for inclusion
#

NODE_BIN=./node_modules/.bin
DOCKER_NODE_BIN=../node_modules/.bin
BUILDDIR=cordova

WEBPACK=$(DOCKER_NODE_BIN)/webpack
WEBPACK_MODE:=production
BABELNODE=$(DOCKER_NODE_BIN)/babel-node
HTMLPDF=$(DOCKER_NODE_BIN)/html-pdf
CORDOVA=$(NODE_BIN)/cordova
MAKE_CONFIG=$(NODE_BIN)/hesperian-cordova-makeconfig
MAKE_WEBINDEX=$(NODE_BIN)/hesperian-web-makeindex
MAKE_VALIDATE=$(NODE_BIN)/hesperian-validate
CORDOVA_CONFIG=$(BUILDDIR)/config.xml
VERSION := $(shell node -p "require('./app-config.json').version")
APPNAME := $(shell node -p "require('./app-config.json').name")
OUTPUT_DIR=output/${VERSION}
OUTPUT_NAME=${APPNAME}-${VERSION}
WEBAPP_DIR=./dist-web

CD_BUILDDIR= cd ${BUILDDIR}; fnm use v22.3.0

CURRENT_DIR=$(shell pwd)

WEBPACK_DOCKER=docker run -v ${CURRENT_DIR}:/app/webpack -w /app/webpack hesperian-mobile
WEBPACK_DOCKER_CORDOVA=docker run -v ${CURRENT_DIR}:/app/webpack -w /app/webpack/cordova hesperian-mobile


.PHONY: build clean webpack watch dist help site web docker-web docker-watch docker-site

help:
	@echo "Common make targets:"
	@echo "\tmake watch\t webpack watch build in the dist directory"
	@echo "\tmake build\t full cordova release build created in ./output"

docker-install:
	${WEBPACK_DOCKER} npm install
	
docker-webpack:
	${WEBPACK_DOCKER} make webpack

docker-site:
	${WEBPACK_DOCKER} make site

docker-watch:
	docker run --init -it -v .:/app/webpack -w /app/webpack hesperian-mobile make watch

webpack:
	rm -rf dist
	$(WEBPACK) --mode=${WEBPACK_MODE};
	${MAKE_WEBINDEX} app ./app-config.json www-templates > dist/index.html

watch:
	$(WEBPACK) --watch

site:
	rm -rf ${WEBAPP_DIR}
	cp -R dist ${WEBAPP_DIR}
	${MAKE_WEBINDEX} web ./app-config.json www-templates > ${WEBAPP_DIR}/index.html
	${MAKE_WEBINDEX} webembed ./app-config.json www-templates > ${WEBAPP_DIR}/embed.html
	cp -R ./node_modules/hesperian-mobile/website-common ${WEBAPP_DIR}/
	cp -R www-templates/web-img ${WEBAPP_DIR}/
	mkdir -p ${OUTPUT_DIR}
	(cd ${WEBAPP_DIR}; zip -r ../${OUTPUT_DIR}/app-${VERSION}.zip .)

dist: docker-webpack $(CORDOVA_CONFIG)
	rm -rf ${BUILDDIR}/www
	cp -R dist ${BUILDDIR}/www

cordova-build: dist
	@(cd ${BUILDDIR}; fnm use v22.3.0; cordova build --device --release --verbose -- --password="${CORDOVA_SIGNING_PASSPHRASE}" --storePassword="${CORDOVA_SIGNING_PASSPHRASE}")

app: cordova-build
	mkdir -p ${OUTPUT_DIR}
	cp ${BUILDDIR}/platforms/ios/build/*/*.ipa ${OUTPUT_DIR}/${OUTPUT_NAME}.ipa
	cp ${BUILDDIR}/platforms/android/app/build/outputs/bundle/release/*.aab ${OUTPUT_DIR}/${OUTPUT_NAME}.aab


.PHONY: build
build: app docker-site

$(CORDOVA_CONFIG): app-config.json ${MAKE_CONFIG}
	(cd ${BUILDDIR}; rm -rf resources-tmp; ${WEBPACK_DOCKER_CORDOVA} ../${MAKE_CONFIG} ../app-config.json)

# Make sure emulator is running to pick up correct device
# Android Studio -> Tools -> AVD's
.PHONY: emulate-android
emulate-android: dist
	@(cd ${BUILDDIR}; cordova emulate android --device --release -- --password="${CORDOVA_SIGNING_PASSPHRASE}" --storePassword="${CORDOVA_SIGNING_PASSPHRASE}")

clean:
	rm -rf ${BUILDDIR}/platforms/ios/build/
	(cd ${BUILDDIR}; cordova clean)

distclean:
	rm -rf ${BUILDDIR}/platforms/
	rm -rf ${BUILDDIR}/node_modules package-lock.json
	rm -rf ${BUILDDIR}/www ${BUILDDIR}/platforms ${BUILDDIR}/plugins

install:
	npm install
	
cordova-install: $(CORDOVA_CONFIG) webpack
	(${CD_BUILDDIR}; npm ci)
	rm -rf ${BUILDDIR}/www
	cp -R dist ${BUILDDIR}/www
	rm -rf ${BUILDDIR}/platforms
	rm -rf ${BUILDDIR}/plugins
	(${CD_BUILDDIR}; cordova prepare)





.PHONY: libsync
libsync:
	rsync -avu --delete --exclude=node_modules --exclude=.git ../hesperian-mobile/ ./node_modules/hesperian-mobile; chmod +x ./node_modules/.bin/*

.PHONY: example-libsync
example-libsync:
	rsync -avu --delete --exclude=node_modules --exclude=.git --exclude=example ../ ./node_modules/hesperian-mobile; chmod +x ./node_modules/.bin/*

.PHONY: validate
validate:
	${MAKE_VALIDATE}

